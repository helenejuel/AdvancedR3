---
title: "Draft Quarto document"
author: 
- name: Helene BÃ¦k Juel
  affiliations: 
  - name: Freya Biosciences
format: html
execute:
  echo: true
editor:
    markdown:
        wrap: 72
        canonical: true
---

## Setup and load data

```{r setup, warning=FALSE, include=TRUE}
targets::tar_config_set(store = here::here("_targets"))

library(tidyverse)
library(targets)
library(tidymodels)

source(here::here("R/functions.R"))

lipidomics <- tar_read(lipidomics)
```

## Results

```{r stats-table, include=TRUE}
tar_read(df_stats_by_metabolite) %>%
  dplyr::mutate(MeanSD = glue::glue("{value_mean} ({value_sd})")) %>%
  select(Metabolite = metabolite, `Mean SD` = MeanSD) %>%
  knitr::kable(caption = "Descriptive statistics of the metabolites")
```

```{r histograms-targets, include=TRUE}
tar_read(fig_metabolite_distribution)
```

## Building the model

```{r wrangle, eval = FALSE, include=FALSE}
lipidomics_wide <- lipidomics %>%
  mutate(metabolite = snakecase::to_snake_case(metabolite)) %>%
  pivot_wider(
    names_from = metabolite,
    values_from = value,
    values_fn = mean,
    names_prefix = "metabolite_"
  )
```

```{r run-wrangle-functions, eval = FALSE, include=FALSE}
lipidomics %>%
  column_values_to_snake_case(metabolite) %>%
  metabolites_to_wider()

# the first function has 2 arguments, data = lipidomics and cols = metabolite.
# the second function has just the one argument, data = lipidomics
```

```{r log-regression, eval = FALSE, include=FALSE}
recipe(class ~ metabolite_lipid_ch_3_1 + age + gender,
  data = lipidomics_wide
)
```

```{r reg-update-roles, eval = FALSE, include=FALSE}
recipe(lipidomics_wide) %>%
  update_role(metabolite_lipid_ch_3_1, age, gender,
    new_role = "predictor"
  ) %>%
  update_role(class,
    new_role = "outcome"
  ) %>%
  step_normalize(starts_with("metabolite_"))
```

```{r reg-update-roles-function, eval = FALSE, include=FALSE}
recipe(lipidomics_wide) %>%
  update_role(metabolite_lipid_ch_3_1, age, gender,
    new_role = "predictor"
  ) %>%
  update_role(class,
    new_role = "outcome"
  ) %>%
  step_normalize(starts_with("metabolite_"))
```

```{r run-recipe-function, eval = FALSE, include=FALSE}
recipe_specs <- lipidomics_wide %>%
  create_recipe_spec(metabolite_lipid_ch_3_1)

recipe_specs
```

```{r workflow, eval = FALSE, include=FALSE}
workflow() %>%
  add_model(log_reg_specs) %>%
  add_recipe(recipe_specs)
```

```{r run-workflow-function, eval = FALSE, include=FALSE}
model_workflow <- create_model_workflow(
  logistic_reg() %>%
    set_engine("glm"),
  lipidomics_wide %>%
    create_recipe_spec(metabolite_lipid_ch_3_1)
)

model_workflow
```

```{r fit-model, eval = FALSE, include=FALSE}
fitted_model <- model_workflow %>%
  fit(lipidomics_wide)

fitted_model
```

```{r simple-model-output, eval = FALSE, include=FALSE}
fitted_model %>%
  extract_fit_parsnip() %>%
  broom::tidy(exponentiate = TRUE) # changes logOR to OR
```

```{r simple-model-function, eval = FALSE, include=FALSE}
fitted_model %>%
  tidy_model_output()
```

```{r putting-it-together, eval = FALSE, include=FALSE}
create_model_workflow(
  logistic_reg() %>%
    set_engine("glm"),
  lipidomics_wide %>%
    create_recipe_spec(metabolite_lipid_ch_3_1)
) %>%
  fit(lipidomics_wide) %>%
  tidy_model_output()
```

## Running multiple models

```{r split-function, eval = FALSE, include=FALSE}
lipidomics %>%
  split_by_metabolite()
```

```{r split-model-function, eval=FALSE, include=FALSE}
model_estimates <- lipidomics %>%
  split_by_metabolite() %>%
  map(generate_model_results) %>%
  list_rbind() %>%
  filter(str_detect(term, "metabolite_"))

model_estimates
```

```{r original-names, eval = FALSE, include=FALSE}
lipidomics %>%
  select(metabolite) %>%
  mutate(term = metabolite) %>%
  column_values_to_snake_case(term) %>%
  mutate(term = str_c("metabolite_", term)) %>%
  distinct(term, metabolite) %>%
  right_join(model_estimates, by = "term")

```

## Figure of model estimates

```{r model-estimates-targets, include=TRUE}
model_estimates <- tar_read(df_model_estimates)

```

```{r plot-estimates, eval = FALSE, include=FALSE}
plot_estimates <- model_estimates %>% 
    ggplot(aes(x = estimate, y = metabolite, 
               xmin = estimate - std.error,
               xmax = estimate + std.error)) +
    geom_pointrange() +
    coord_fixed(xlim = c(0,5))

plot_estimates
```

```{r plot-estimates-function, eval=FALSE, include=FALSE}
model_estimates %>% 
    plot_estimates()

```

```{r plot-estimates-targets, include=TRUE}
tar_read(fig_model_estimates)
```
